#SAJR 0.0 - Splicing Analyzer by Java & R
#
#Garbage in - garbage out.
#
#configuration file
#
#groups of parameters are defined by <name></> and make no sense, they used just to organize 
#parameters and to print them to output: for read_counter only parameters from groups common 
#and read_counter will be printed.
#each parameter should have unique name (in case of duplicates, last value will be used)
#leading tabs will removed, each parameter should be in form of 'name: value;', everything after ';' 
#will be ignored
#empty lines, or lines started with '#' (after removal of leading tabs) will be skipped.
#
#
#There are three methods available now:
#annotate: make annotation from bam
#gff2sajr/gff32sajr: convert annotation. 
#count_reads: yes, it counts reads.
#
#For more details please visit http://storage.bioinf.fbb.msu.ru/~mazin/index.html

<batch>
#for batch read count processing
#should contain list (separated by comma) of input and output files
#null for single file run, in and out_base will be overwritten instead
	batch_in: 1.bam,2.bam; 
	batch_out: 1,2;
</>
<common>
#settings that are necessary for more than one method
	debug: true;
	verbose: true;
	suppress_warnings: true;
	in: /home/pasha/annotate.example/PvScaf77969.bam;	
	stranded: 1;
	paired: 0;
	use_mult: false;
	use_singletons: true;
	gene_black_list: -;
	exception2warn: true;
</>
<read_counter>
#read counter settings
	ann_in: a.gff;
	count_only_border_reads: false;
	count_intron_reads: false;
	count_only_internal: true;
	use_reads_with_unknown_junctions: false;
	look_for_gene_for_unknown_junctions: true;
	only_junctions_from_same_gene: true;
	out_base: out;
	effective_read_length: 150;
	bam_cell_barcode_attr: CB;
	bam_umi_attr: UB;
</>
<annotate>
#settings for methods that produces annotation (de novo, or from existing one)
	ann_foreign: -;
	forced_intron_set: -;
	ann_out: /home/pasha/annotate.example/out.gff;
	fasta: /home/pasha/annotate.example/PvScaf_v0.9.fa;
	site_usage_freq: 0.05;
	min_cov: 1;
	max_cov_gap: 5;
	min_single_exon_gene_length: 300;
	min_single_exon_gene_cov: 5;
	junc_overhang: 5;
	id_prefix: sajr;
	indep_pos: 3;
	#split genes by coverage step
	cov_win_len: 10;
	#if cov(next)/cov(current) > max_cov_step or < 1/max_cov_step then cut the segment.
	max_cov_step: 10;
	#fill position with unknown nt with the same coverage as in surrounding regions
	fill_ns: true;
	#this coverage is added to all junctions that are present in foreign annotation
	foreign_junc_cov: 5;
</>
<sajr_comp>
	comp_ann1: /home/pasha/annotate.example/out.gff;
	comp_ann2: /home/pasha/annotate.example/PvScaf77969.sajr.gff;
	comp_out: /home/pasha/annotate.example/sajr.comp;
</>
<sajr2transc>
	gff_in: -;
	gff_out: -;
	seg_counts_path: -;
	ir_psi: 0.4;
	as_psi: 0.05;
</>